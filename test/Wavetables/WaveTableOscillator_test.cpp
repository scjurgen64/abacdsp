#include "FftSmall.h"

#include "DSP/Synthesiser/WaveTableOscillator.h"

#include "gtest/gtest.h"

#include <numbers>
#include <vector>

TEST(WaveTableOscillator, pwmAt20Percent)
{
    constexpr size_t sampleRate{48000};
    AbacDsp::WaveTableOscillator osc{sampleRate};
    osc.setWaveset(0, AbacDsp::BasicWave::Square);
    osc.setPwm(0.2f);
    const std::vector expected{
        -0.00211337f, 0.421232f,    0.223527f,    0.193018f,    0.0777902f,   0.000422685f, -0.0777908f,  -0.192173f,
        -0.223528f,   -0.420386f,   -0.00211234f, 0.421232f,    0.223527f,    0.193017f,    0.0777902f,   0.000422479f,
        -0.0777908f,  -0.192173f,   -0.223528f,   -0.420386f,   -0.00211131f, 0.421232f,    0.223527f,    0.193017f,
        0.0777902f,   0.000422273f, -0.0777908f,  -0.192173f,   -0.223528f,   -0.420386f,   -0.00211027f, 0.421232f,
        0.223527f,    0.193017f,    0.0777902f,   0.000422066f, -0.0777908f,  -0.192173f,   -0.223528f,   -0.420386f,
        -0.00210924f, 0.421231f,    0.223527f,    0.193017f,    0.0777902f,   0.00042186f,  -0.0777908f,  -0.192173f,
        -0.223528f,   -0.420386f,   -0.00210821f, 0.421231f,    0.223527f,    0.193016f,    0.0777902f,   0.000421654f,
        -0.0777908f,  -0.192174f,   -0.223528f,   -0.420387f,   -0.00210718f, 0.421231f,    0.223527f,    0.193016f,
        0.0777902f,   0.000421447f, -0.0777908f,  -0.192174f,   -0.223528f,   -0.420387f,   -0.00210615f, 0.421231f,
        0.223527f,    0.193016f,    0.0777902f,   0.000421241f, -0.0777908f,  -0.192174f,   -0.223528f,   -0.420387f,
        -0.00210511f, 0.421231f,    0.223527f,    0.193016f,    0.0777902f,   0.000421034f, -0.0777908f,  -0.192174f,
        -0.223528f,   -0.420387f,   -0.00210408f, 0.42123f,     0.223527f,    0.193016f,    0.0777902f,   0.000420828f,
        -0.0777908f,  -0.192174f,   -0.223528f,   -0.420387f};
    constexpr int numSamples = 100;
    std::vector<float> soundBuf(numSamples);

    osc.setFrequency(4800);
    std::vector<float> tmp(numSamples);
    osc.processBlock(tmp.data(), tmp.size());
    std::transform(tmp.data(), tmp.data() + numSamples, soundBuf.data(), [](const float in) { return 0.5f * in; });
    for (size_t i = 0; i < soundBuf.size(); ++i)
    {
        // TODO(JS): once done with tweaking levels remove and correct
        // EXPECT_NEAR(soundBuf[i], expected[i], 1E-6f) << "failed at sample " << i;
    }
}

struct OscTestParams
{
    std::string namedSet;
    int waveset;
    std::vector<float> expected;
};

class WaveTableOscillatorParamTest : public ::testing::TestWithParam<OscTestParams>
{
  public:
    struct PrintToStringParamName
    {
        template <class ParamType>
        std::string operator()(const testing::TestParamInfo<ParamType>& info) const
        {
            return std::string(info.param.namedSet);
        }
    };
};

TEST_P(WaveTableOscillatorParamTest, correctWave)
{
    constexpr size_t sampleRate{48000};
    AbacDsp::WaveTableOscillator osc{sampleRate};
    osc.setWaveset(0, static_cast<AbacDsp::BasicWave>(GetParam().waveset));
    osc.setPwm(0.f);
    osc.setMorph(0.f);
    const std::vector<float> frequencySet{220.f, 400.f, 800.f, 1900.f, 3000.f};
    const auto& expected = GetParam().expected;
    std::vector<float> soundBuf;
    size_t pushIdx = 0;
    for (const auto& f : frequencySet)
    {
        constexpr auto numSamples = 500u;
        osc.setFrequency(f);
        size_t idx = 0;
        while (idx < numSamples)
        {
            size_t randInc = 2 + rand() % 100;
            if (idx + randInc > numSamples)
            {
                randInc = numSamples - idx;
            }
            std::vector<float> tmp(randInc);
            osc.processBlock(tmp.data(), tmp.size());
            for (const float v : tmp)
            {
                if (pushIdx++ % 10 == 0) // thin out test data
                {
                    soundBuf.push_back(v * 0.5f);
                }
            }
            idx += randInc;
        }
    }
    ASSERT_EQ(soundBuf.size(), 250);
    for (size_t i = 0; i < expected.size(); ++i)
    {
        // TODO(JS): once done with tweaking levels remove and correct
        // EXPECT_NEAR(soundBuf[i], expected[i], 1E-6f) << "failed at sample " << i;
    }
}

INSTANTIATE_TEST_SUITE_P(
    WaveTableOscillatorTests, WaveTableOscillatorParamTest,
    ::testing::Values(
        OscTestParams{
            "Sine",
            0,
            {0.430866f,     0.353504f,   0.274147f,   0.194781f,   0.115414f,  0.0360515f,  -0.0433018f, -0.122644f,
             -0.201973f,    -0.281289f,  -0.360584f,  -0.426189f,  -0.346246f, -0.266868f,  -0.187518f,  -0.108182f,
             -0.0288518f,   0.0504798f,  0.129819f,   0.20917f,    0.288539f,  0.367955f,   0.418024f,   0.338975f,
             0.259676f,     0.180348f,   0.101006f,   0.0216513f,  -0.057711f, -0.137075f,  -0.216435f,  -0.295781f,
             -0.375086f,    -0.411289f,  -0.331871f,  -0.252489f,  -0.173116f, -0.0937518f, -0.014399f,  0.0649421f,
             0.144273f,     0.223598f,   0.30292f,    0.382243f,   0.403978f,  0.324555f,   0.245212f,   0.16588f,
             0.0865517f,    0.00722026f, -0.0721422f, -0.216411f,  -0.360697f, -0.360682f,  -0.216395f,  -0.0721263f,
             0.0721414f,    0.21641f,    0.360697f,   0.360683f,   0.216396f,  0.0721265f,  -0.0721412f, -0.21641f,
             -0.360696f,    -0.360683f,  -0.216396f,  -0.0721272f, 0.0721404f, 0.216409f,   0.360696f,   0.360684f,
             0.216397f,     0.0721276f,  -0.0721402f, -0.216409f,  -0.360695f, -0.360684f,  -0.216397f,  -0.0721282f,
             0.0721394f,    0.216408f,   0.360695f,   0.360685f,   0.216398f,  0.0721286f,  -0.0721391f, -0.216408f,
             -0.360694f,    -0.360686f,  -0.216398f,  -0.0721293f, 0.0721384f, 0.216407f,   0.360693f,   0.360686f,
             0.216399f,     0.0721296f,  -0.0721381f, -0.216407f,  -0.361258f, -0.216419f,  0.071935f,   0.361257f,
             0.216419f,     -0.0719348f, -0.361258f,  -0.216419f,  0.0719346f, 0.361257f,   0.21642f,    -0.0719344f,
             -0.361257f,    -0.21642f,   0.0719342f,  0.361257f,   0.21642f,   -0.071934f,  -0.361257f,  -0.21642f,
             0.0719338f,    0.361256f,   0.21642f,    -0.0719336f, -0.361257f, -0.21642f,   0.0719334f,  0.361256f,
             0.216421f,     -0.0719332f, -0.361256f,  -0.216421f,  0.071933f,  0.361255f,   0.216421f,   -0.0719328f,
             -0.361256f,    -0.216421f,  0.0719326f,  0.361255f,   0.216422f,  -0.0719324f, -0.361255f,  -0.216422f,
             0.0719322f,    0.361255f,   0.216422f,   -0.071932f,  -0.361255f, -0.216422f,  0.0721862f,  0.109485f,
             -0.287973f,    0.401352f,   -0.216653f,  0.0348631f,  0.144143f,  -0.321933f,  0.362339f,   -0.178859f,
             -3.26138e-07f, 0.17886f,    -0.362341f,  0.321931f,   -0.144142f, -0.0348638f, 0.216654f,   -0.401354f,
             0.287972f,     -0.109484f,  -0.072187f,  0.254324f,   -0.41822f,  0.254321f,   -0.0721848f, -0.109486f,
             0.287975f,     -0.401351f,  0.216652f,   -0.0348618f, -0.144144f, 0.321934f,   -0.362337f,  0.178858f,
             1.54815e-06f,  -0.178861f,  0.362343f,   -0.32193f,   0.144141f,  0.0348651f,  -0.216656f,  0.401355f,
             -0.28797f,     0.109483f,   0.0721883f,  -0.254326f,  0.41822f,   -0.25432f,   0.0721834f,  0.109487f,
             -0.285465f,    0.0698767f,  0.147021f,   -0.368199f,  0.285466f,  -0.0698767f, -0.147021f,  0.368199f,
             -0.285466f,    0.0698767f,  0.147021f,   -0.368199f,  0.285466f,  -0.0698767f, -0.147021f,  0.368199f,
             -0.285466f,    0.0698767f,  0.147021f,   -0.368199f,  0.285466f,  -0.0698767f, -0.147021f,  0.368199f,
             -0.285466f,    0.0698767f,  0.147021f,   -0.368199f,  0.285466f,  -0.0698767f, -0.147021f,  0.368199f,
             -0.285466f,    0.0698767f,  0.147021f,   -0.368199f,  0.285466f,  -0.0698767f, -0.147021f,  0.368199f,
             -0.285466f,    0.0698767f,  0.147021f,   -0.368199f,  0.285466f,  -0.0698767f, -0.147021f,  0.368199f,
             -0.285466f,    0.0698767f}},
        OscTestParams{
            "Triangle",
            1,
            {-0.0380394f, 0.385584f,   0.354364f,   0.317162f,    0.276848f,    0.235127f,   0.193656f,  0.153503f,
             0.114739f,   0.0765224f,  0.0377496f,  -0.00219962f, -0.0430978f,  -0.0840324f, -0.12402f,  -0.162687f,
             -0.20061f,   -0.239071f,  -0.279296f,  -0.321749f,   -0.365874f,   -0.410858f,  0.442727f,  0.379739f,
             0.341593f,   0.305207f,   0.268282f,   0.229623f,    0.189188f,    0.147893f,   0.106985f,  0.0672896f,
             0.0286962f,  -0.0096496f, -0.048748f,  -0.0890639f,  -0.130194f,   -0.171085f,  -0.210679f, -0.248681f,
             -0.28592f,   -0.32409f,   -0.365467f,  -0.416799f,   0.447095f,    0.384274f,   0.338379f,  0.296623f,
             0.257608f,   0.21988f,    0.182498f,   0.109563f,    0.0367803f,   -0.0359529f, -0.108734f, -0.181671f,
             -0.255025f,  -0.329708f,  -0.413515f,  0.414342f,    0.33054f,     0.255854f,   0.182499f,  0.109564f,
             0.0367812f,  -0.035952f,  -0.108733f,  -0.18167f,    -0.255024f,   -0.329707f,  -0.413514f, 0.414343f,
             0.330541f,   0.255855f,   0.1825f,     0.109565f,    0.0367822f,   -0.0359509f, -0.108732f, -0.181669f,
             -0.255023f,  -0.329706f,  -0.413512f,  0.414343f,    0.330542f,    0.255856f,   0.182501f,  0.109566f,
             0.0367833f,  -0.0359499f, -0.108731f,  -0.181668f,   -0.255022f,   -0.329705f,  -0.413511f, 0.414344f,
             0.330543f,   0.255857f,   0.182502f,   0.109567f,    0.0404134f,   -0.110236f,  -0.253181f, -0.371384f,
             0.336422f,   0.174251f,   0.0404136f,  -0.110236f,   -0.253181f,   -0.371385f,  0.336422f,  0.174251f,
             0.040414f,   -0.110236f,  -0.25318f,   -0.371386f,   0.336422f,    0.174251f,   0.0404143f, -0.110236f,
             -0.253179f,  -0.371388f,  0.336422f,   0.174251f,    0.0404146f,   -0.110236f,  -0.253179f, -0.371389f,
             0.336422f,   0.174251f,   0.0404149f,  -0.110236f,   -0.253178f,   -0.37139f,   0.336422f,  0.174252f,
             0.0404153f,  -0.110236f,  -0.253178f,  -0.371391f,   0.336422f,    0.174252f,   0.0404156f, -0.110236f,
             -0.253177f,  -0.371392f,  0.336422f,   0.174252f,    0.0404159f,   -0.110236f,  -0.266869f, 0.280364f,
             -0.0690695f, -0.373955f,  0.113359f,   -0.223588f,   0.268913f,    -0.0649147f, -0.473251f, 0.137227f,
             -0.204999f,  0.298078f,   -0.0371495f, -0.376463f,   0.137671f,    -0.208982f,  0.35215f,   -0.00680924f,
             -0.319627f,  0.151862f,   -0.188671f,  0.349414f,    2.5186e-08f,  -0.350237f,  0.189518f,  -0.151155f,
             0.319628f,   0.00726019f, -0.351302f,  0.209034f,    -0.137671f,   0.379017f,   0.0379961f, -0.296796f,
             0.204999f,   -0.137013f,  0.474099f,   0.0652535f,   -0.268913f,   0.224494f,   -0.112512f, 0.367915f,
             0.0690693f,  -0.280574f,  0.267716f,   -0.0789363f,  -0.00510048f, 0.0795051f,  -0.266867f, 0.280363f,
             -0.088074f,  0.251531f,   -0.314458f,  0.0235632f,   0.387623f,    -0.200146f,  0.135927f,  -0.432854f,
             -0.088074f,  0.251531f,   -0.314458f,  0.0235632f,   0.387623f,    -0.200146f,  0.135927f,  -0.432854f,
             -0.088074f,  0.251531f,   -0.314458f,  0.0235632f,   0.387623f,    -0.200146f,  0.135927f,  -0.432854f,
             -0.088074f,  0.251531f,   -0.314458f,  0.0235632f,   0.387623f,    -0.200146f,  0.135927f,  -0.432854f,
             -0.088074f,  0.251531f,   -0.314458f,  0.0235632f,   0.387623f,    -0.200146f,  0.135927f,  -0.432854f,
             -0.088074f,  0.251531f,   -0.314458f,  0.0235632f,   0.387623f,    -0.200146f,  0.135927f,  -0.432854f,
             -0.088074f,  0.251531f}},
        OscTestParams{
            "SharkFin",
            3,
            {4.96027e-08f, -0.100439f,  -0.192606f,  -0.268909f,  -0.323066f,    -0.350614f, -0.349286f,  -0.31919f,
             -0.262806f,   -0.184776f,  -0.0915291f, 0.00925636f, 0.10928f,      0.200304f,  0.27483f,    0.326721f,
             0.351703f,    0.347717f,   0.315094f,   0.256518f,   0.176816f,     0.0825505f, -0.0185134f, -0.118052f,
             -0.207869f,   -0.280564f,  -0.330153f,  -0.35255f,   -0.345911f,    -0.310782f, -0.250057f,  -0.168738f,
             -0.073521f,   0.0277509f,  0.126738f,   0.215287f,   0.286104f,     0.333358f,  0.353155f,   0.343867f,
             0.306256f,    0.243422f,   0.16054f,    0.0644352f,  -0.036976f,    -0.135342f, -0.222561f,  -0.291449f,
             -0.336334f,   -0.353519f,  -0.341587f,  -0.250053f,  -0.0915186f,   0.0915384f, 0.250068f,   0.341592f,
             0.341587f,    0.250054f,   0.0915196f,  -0.0915375f, -0.250068f,    -0.341592f, -0.341587f,  -0.250054f,
             -0.0915198f,  0.0915372f,  0.250067f,   0.341591f,   0.341587f,     0.250055f,  0.0915207f,  -0.0915363f,
             -0.250067f,   -0.341591f,  -0.341587f,  -0.250055f,  -0.0915211f,   0.091536f,  0.250066f,   0.341591f,
             0.341588f,    0.250056f,   0.091522f,   -0.091535f,  -0.250066f,    -0.341591f, -0.341588f,  -0.250056f,
             -0.0915224f,  0.0915347f,  0.250065f,   0.341591f,   0.341588f,     0.250057f,  0.0915233f,  -0.0915337f,
             -0.250065f,   -0.341591f,  -0.341588f,  -0.250057f,  -0.0915236f,   0.250065f,  0.341588f,   0.0915244f,
             -0.250064f,   -0.341588f,  -0.0915241f, 0.250064f,   0.341588f,     0.0915249f, -0.250064f,  -0.341589f,
             -0.0915246f,  0.250064f,   0.341589f,   0.0915255f,  -0.250063f,    -0.341589f, -0.0915251f, 0.250063f,
             0.341589f,    0.091526f,   -0.250063f,  -0.341589f,  -0.0915256f,   0.250063f,  0.341589f,   0.0915265f,
             -0.250063f,   -0.341589f,  -0.0915261f, 0.250063f,   0.341589f,     0.091527f,  -0.250062f,  -0.341589f,
             -0.0915266f,  0.250062f,   0.341589f,   0.0915275f,  -0.250062f,    -0.341589f, -0.0915271f, 0.250062f,
             0.341589f,    0.091528f,   -0.250062f,  -0.341589f,  -0.0915277f,   0.250062f,  0.341589f,   -0.326721f,
             0.17682f,     0.0461591f,  -0.250061f,  0.350614f,   -0.306261f,    0.135332f,  0.0915288f,  -0.280561f,
             0.35364f,     -0.280561f,  0.0915281f,  0.135333f,   -0.306261f,    0.350614f,  -0.250061f,  0.0461583f,
             0.17682f,     -0.326721f,  0.341589f,   -0.215281f,  -1.32143e-06f, 0.215283f,  -0.34159f,   0.32672f,
             -0.176819f,   -0.0461608f, 0.250062f,   -0.350614f,  0.30626f,      -0.135331f, -0.0915304f, 0.280562f,
             -0.35364f,    0.280559f,   -0.0915265f, -0.135334f,  0.306262f,     -0.350614f, 0.250059f,   -0.0461566f,
             -0.176822f,   0.326722f,   -0.341589f,  0.21528f,    3.10328e-06f,  -0.215284f, 0.34159f,    -0.326719f,
             0.176817f,    -0.341588f,  0.306262f,   -0.0915318f, -0.176817f,    0.341588f,  -0.306262f,  0.0915317f,
             0.176817f,    -0.341588f,  0.306262f,   -0.0915318f, -0.176817f,    0.341588f,  -0.306262f,  0.0915317f,
             0.176817f,    -0.341588f,  0.306262f,   -0.0915318f, -0.176817f,    0.341588f,  -0.306262f,  0.0915317f,
             0.176817f,    -0.341588f,  0.306262f,   -0.0915318f, -0.176817f,    0.341588f,  -0.306262f,  0.0915317f,
             0.176817f,    -0.341588f,  0.306262f,   -0.0915318f, -0.176817f,    0.341588f,  -0.306262f,  0.0915317f,
             0.176817f,    -0.341588f,  0.306262f,   -0.0915318f, -0.176817f,    0.341588f,  -0.306262f,  0.0915317f,
             0.176817f,    -0.341588f}},
        OscTestParams{"Pulse",
                      5,
                      {0.0219729f, -0.24489f,  -0.249502f, -0.25138f,  -0.251907f,   -0.251419f, -0.250245f, -0.248813f,
                       -0.247644f, -0.247356f, -0.249351f, 0.269206f,  0.255622f,    0.252517f,  0.250335f,  0.24885f,
                       0.248243f,  0.248577f,  0.249744f,  0.251483f,  0.253484f,    0.255751f,  -0.260655f, -0.246923f,
                       -0.247032f, -0.248222f, -0.249737f, -0.251066f, -0.251785f,   -0.251595f, -0.250316f, -0.247713f,
                       -0.241655f, 0.230609f,  0.24919f,   0.251717f,  0.25216f,     0.251503f,  0.250243f,  0.248901f,
                       0.24799f,   0.247991f,  0.249564f,  0.256207f,  -0.266398f,   -0.253774f, -0.250419f, -0.24872f,
                       -0.248171f, -0.248603f, -0.25273f,  -0.253739f, -0.260107f,   0.260106f,  0.25374f,   0.25273f,
                       0.25273f,   0.253739f,  0.260107f,  -0.260106f, -0.25374f,    -0.25273f,  -0.25273f,  -0.253739f,
                       -0.260107f, 0.260106f,  0.25374f,   0.25273f,   0.25273f,     0.253739f,  0.260107f,  -0.260106f,
                       -0.25374f,  -0.25273f,  -0.25273f,  -0.253739f, -0.260107f,   0.260106f,  0.25374f,   0.25273f,
                       0.252729f,  0.253739f,  0.260106f,  -0.260106f, -0.25374f,    -0.25273f,  -0.252729f, -0.253739f,
                       -0.260106f, 0.260106f,  0.25374f,   0.252729f,  0.252729f,    0.253739f,  0.260106f,  -0.260105f,
                       -0.25374f,  -0.252729f, -0.252729f, -0.253739f, -0.237868f,   0.258006f,  0.2469f,    0.237869f,
                       -0.258006f, -0.2469f,   -0.237869f, 0.258006f,  0.2469f,      0.23787f,   -0.258006f, -0.246899f,
                       -0.237869f, 0.258006f,  0.246899f,  0.237871f,  -0.258006f,   -0.246899f, -0.23787f,  0.258006f,
                       0.246899f,  0.237872f,  -0.258006f, -0.246899f, -0.237871f,   0.258006f,  0.246899f,  0.237872f,
                       -0.258006f, -0.246899f, -0.237872f, 0.258006f,  0.246899f,    0.237873f,  -0.258006f, -0.246899f,
                       -0.237873f, 0.258006f,  0.246898f,  0.237874f,  -0.258006f,   -0.246898f, -0.237874f, 0.258006f,
                       0.246898f,  0.237875f,  -0.258006f, -0.246898f, -0.237874f,   0.258006f,  0.263624f,  -0.249261f,
                       0.224526f,  0.220203f,  -0.268406f, 0.249898f,  -0.234858f,   0.256429f,  0.295314f,  -0.250708f,
                       0.23683f,   -0.251324f, 0.295315f,  0.255151f,  -0.234858f,   0.250391f,  -0.268406f, 0.21646f,
                       0.224525f,  -0.24979f,  0.263624f,  -0.247431f, -0.00293658f, 0.248234f,  -0.263624f, 0.24926f,
                       -0.224526f, -0.220208f, 0.268405f,  -0.249897f, 0.234858f,    -0.256431f, -0.295314f, 0.250707f,
                       -0.23683f,  0.251325f,  -0.295315f, -0.255149f, 0.234858f,    -0.250391f, 0.268406f,  -0.216454f,
                       -0.224525f, 0.249791f,  -0.263624f, 0.24743f,   0.00294624f,  -0.248235f, 0.263624f,  -0.249259f,
                       0.274779f,  -0.260905f, 0.260158f,  -0.263643f, -0.274779f,   0.260905f,  -0.260158f, 0.263643f,
                       0.274779f,  -0.260905f, 0.260158f,  -0.263643f, -0.274779f,   0.260905f,  -0.260158f, 0.263643f,
                       0.274779f,  -0.260905f, 0.260158f,  -0.263643f, -0.274779f,   0.260905f,  -0.260158f, 0.263643f,
                       0.274779f,  -0.260905f, 0.260158f,  -0.263643f, -0.274779f,   0.260905f,  -0.260158f, 0.263643f,
                       0.274779f,  -0.260905f, 0.260158f,  -0.263643f, -0.274779f,   0.260905f,  -0.260158f, 0.263643f,
                       0.274779f,  -0.260905f, 0.260158f,  -0.263643f, -0.274779f,   0.260905f,  -0.260158f, 0.263643f,
                       0.274779f,  -0.260905f}}),
    WaveTableOscillatorParamTest::PrintToStringParamName());
}
