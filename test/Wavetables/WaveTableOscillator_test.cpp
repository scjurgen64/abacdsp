#include "Wavetables/WaveTableOscillator.h"

#include "gtest/gtest.h"

#include <numbers>
#include <vector>

namespace AbacDsp::Test
{

TEST(WaveTableOscillator, pwmAt20Percent)
{
    constexpr size_t sampleRate{48000};
    WaveTableOscillator osc{sampleRate};
    osc.setWaveset(0, BasicWave::Square);
    osc.setPwm(0.2f);
    const std::vector expected{
        0.000488323f,  -0.186704f,    -0.302582f,    -0.302883f,    -0.187494f,    -0.000488323f, 0.186704f,
        0.302582f,     0.302883f,     0.187494f,     0.000488085f,  -0.186705f,    -0.302582f,    -0.302883f,
        -0.187494f,    -0.000488085f, 0.186705f,     0.302582f,     0.302883f,     0.187493f,     0.000487846f,
        -0.186705f,    -0.302582f,    -0.302883f,    -0.187493f,    -0.000487846f, 0.186705f,     0.302582f,
        0.302883f,     0.187493f,     0.000487608f,  -0.186705f,    -0.302582f,    -0.302883f,    -0.187493f,
        -0.000487608f, 0.186705f,     0.302582f,     0.302883f,     0.187493f,     0.000487369f,  -0.186705f,
        -0.302582f,    -0.302883f,    -0.187493f,    -0.000487369f, 0.186705f,     0.302582f,     0.302883f,
        0.187493f,     0.000487131f,  -0.186705f,    -0.302582f,    -0.302883f,    -0.187493f,    -0.000487131f,
        0.186705f,     0.302582f,     0.302883f,     0.187493f,     0.000486892f,  -0.186705f,    -0.302582f,
        -0.302883f,    -0.187493f,    -0.000486892f, 0.186706f,     0.302582f,     0.302883f,     0.187492f,
        0.000486654f,  -0.186706f,    -0.302582f,    -0.302883f,    -0.187492f,    -0.000486654f, 0.186706f,
        0.302582f,     0.302883f,     0.187492f,     0.000486416f,  -0.186706f,    -0.302582f,    -0.302883f,
        -0.187492f,    -0.000486416f, 0.186706f,     0.302582f,     0.302883f,     0.187492f,     0.000486177f,
        -0.186706f,    -0.302582f,    -0.302883f,    -0.187492f,    -0.000486177f, 0.186706f,     0.302582f,
        0.302883f,     0.187492f};
    constexpr int numSamples = 100;
    std::vector<float> soundBuf(numSamples);

    osc.setFrequency(4800);
    std::vector<float> tmp(numSamples);
    osc.processBlock(tmp.data(), tmp.size());
    std::transform(tmp.data(), tmp.data() + numSamples, soundBuf.data(), [](const float in) { return 0.5f * in; });
    for (size_t i = 0; i < soundBuf.size(); ++i)
    {
        EXPECT_NEAR(soundBuf[i], expected[i], 1E-6f) << "failed at sample " << i;
    }
}

struct OscTestParams
{
    std::string namedSet;
    int waveset;
    std::vector<float> expected;
};

class WaveTableOscillatorParamTest : public ::testing::TestWithParam<OscTestParams>
{
};

inline void PrintTo(const OscTestParams& tcfg, std::ostream* os)
{
    *os << "failed with wave form " << tcfg.namedSet;
}

TEST_P(WaveTableOscillatorParamTest, correctWave)
{
    constexpr size_t sampleRate{48000};
    WaveTableOscillator osc{sampleRate};
    osc.setWaveset(0, static_cast<BasicWave>(GetParam().waveset));
    osc.setPwm(0.f);
    osc.setMorph(0.f);
    const std::vector<float> frequencySet{220.f, 400.f, 800.f, 1900.f, 3000.f};
    const auto& expected = GetParam().expected;
    std::vector<float> soundBuf;
    size_t pushIdx = 0;
    for (const auto& f : frequencySet)
    {
        constexpr auto numSamples = 500u;
        osc.setFrequency(f);
        size_t idx = 0;
        while (idx < numSamples)
        {
            size_t randInc = 2 + rand() % 100;
            if (idx + randInc > numSamples)
            {
                randInc = numSamples - idx;
            }
            std::vector<float> tmp(randInc);
            osc.processBlock(tmp.data(), tmp.size());
            for (const float v : tmp)
            {
                if (pushIdx++ % 10 == 0) // thin out test data
                {
                    soundBuf.push_back(v * 0.5f);
                }
            }
            idx += randInc;
        }
    }
    ASSERT_EQ(soundBuf.size(), 250);
    for (size_t i = 0; i < expected.size(); ++i)
    {
        EXPECT_NEAR(soundBuf[i], expected[i], 1E-6f) << "failed at sample " << i;
    }
}

std::vector<OscTestParams> testParamsOscTestParams{
    {"Sine",
     0,
     {
         0.0146487f, -0.251377f,   -0.254835f, -0.249632f, -0.24712f,  -0.250254f, -0.252672f, -0.249755f,  -0.246449f,
         -0.250329f, -0.260105f,   0.208388f,  0.241524f,  0.250546f,  0.253397f,  0.249719f,  0.247348f,   0.25024f,
         0.252958f,  0.249727f,    0.244741f,  0.250265f,  -0.294573f, -0.248909f, -0.24552f,  -0.250348f,  -0.252823f,
         -0.249757f, -0.247308f,   -0.25025f,  -0.253739f, -0.249666f, -0.237469f, 0.259094f,  0.257323f,   0.249512f,
         0.246743f,  0.250274f,    0.252648f,  0.249767f,  0.24696f,   0.250281f,  0.255791f,  0.249951f,   -0.225782f,
         -0.250904f, -0.254194f,   -0.249676f, -0.247232f, -0.250242f, -0.246902f, -0.258005f, -0.23786f,   0.236259f,
         0.258006f,  0.247331f,    0.246902f,  0.258005f,  0.237861f,  -0.236258f, -0.258006f, -0.247331f,  -0.246902f,
         -0.258005f, -0.237862f,   0.236257f,  0.258006f,  0.247332f,  0.246901f,  0.258005f,  0.237863f,   -0.236256f,
         -0.258006f, -0.247332f,   -0.246901f, -0.258005f, -0.237864f, 0.236255f,  0.258006f,  0.247332f,   0.246901f,
         0.258005f,  0.237865f,    -0.236254f, -0.258006f, -0.247332f, -0.246901f, -0.258005f, -0.237866f,  0.236253f,
         0.258006f,  0.247333f,    0.2469f,    0.258005f,  0.237867f,  -0.236252f, -0.258006f, -0.247333f,  -0.2469f,
         -0.258005f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,  0.268406f,
         0.263624f,  0.295314f,    -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,  0.295314f,   -0.268406f,
         -0.263624f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,  0.268406f,
         0.263624f,  0.295314f,    -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,  0.295314f,   -0.268406f,
         -0.263624f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,  0.268406f,
         0.263624f,  0.295314f,    -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.249169f,  -0.228929f,  0.297088f,
         0.122228f,  -0.254746f,   0.268241f,  -0.220535f, 0.278204f,  0.219845f,  -0.229805f, 0.27587f,    -0.23024f,
         0.217957f,  0.279106f,    -0.220535f, 0.267893f,  -0.255438f, 0.119581f,  0.297088f,  -0.229303f,  0.248663f,
         -0.283777f, -0.00146831f, 0.283208f,  -0.24917f,  0.228929f,  -0.297088f, -0.122232f, 0.254745f,   -0.268242f,
         0.220535f,  -0.278203f,   -0.219848f, 0.229804f,  -0.27587f,  0.230241f,  -0.217954f, -0.279107f,  0.220535f,
         -0.267893f, 0.255439f,    -0.119576f, -0.297088f, 0.229304f,  -0.248662f, 0.283778f,  0.00147314f, -0.283207f,
         0.24917f,   -0.228928f,   0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f, 0.23266f,    -0.27542f,
         0.158233f,  0.264833f,    -0.23266f,  0.27542f,   -0.158233f, -0.264833f, 0.23266f,   -0.27542f,   0.158233f,
         0.264833f,  -0.23266f,    0.27542f,   -0.158233f, -0.264833f, 0.23266f,   -0.27542f,  0.158233f,   0.264833f,
         -0.23266f,  0.27542f,     -0.158233f, -0.264833f, 0.23266f,   -0.27542f,  0.158233f,  0.264833f,   -0.23266f,
         0.27542f,   -0.158233f,   -0.264833f, 0.23266f,   -0.27542f,  0.158233f,  0.264833f,  -0.23266f,   0.27542f,
         -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,  0.264833f,  -0.23266f,
     }},
    OscTestParams{"Triangle",
                  1,
                  {
                      0.0146487f, -0.251377f, -0.254835f, -0.249632f, -0.24712f,    -0.250254f, -0.252672f, -0.249755f,
                      -0.246449f, -0.250329f, -0.260105f, 0.208388f,  0.241524f,    0.250546f,  0.253397f,  0.249719f,
                      0.247348f,  0.25024f,   0.252958f,  0.249727f,  0.244741f,    0.250265f,  -0.294573f, -0.248909f,
                      -0.24552f,  -0.250348f, -0.252823f, -0.249757f, -0.247308f,   -0.25025f,  -0.253739f, -0.249666f,
                      -0.237469f, 0.259094f,  0.257323f,  0.249512f,  0.246743f,    0.250274f,  0.252648f,  0.249767f,
                      0.24696f,   0.250281f,  0.255791f,  0.249951f,  -0.225782f,   -0.250904f, -0.254194f, -0.249676f,
                      -0.247232f, -0.250242f, -0.246902f, -0.258005f, -0.23786f,    0.236259f,  0.258006f,  0.247331f,
                      0.246902f,  0.258005f,  0.237861f,  -0.236258f, -0.258006f,   -0.247331f, -0.246902f, -0.258005f,
                      -0.237862f, 0.236257f,  0.258006f,  0.247332f,  0.246901f,    0.258005f,  0.237863f,  -0.236256f,
                      -0.258006f, -0.247332f, -0.246901f, -0.258005f, -0.237864f,   0.236255f,  0.258006f,  0.247332f,
                      0.246901f,  0.258005f,  0.237865f,  -0.236254f, -0.258006f,   -0.247332f, -0.246901f, -0.258005f,
                      -0.237866f, 0.236253f,  0.258006f,  0.247333f,  0.2469f,      0.258005f,  0.237867f,  -0.236252f,
                      -0.258006f, -0.247333f, -0.2469f,   -0.258005f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,
                      -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,    0.295314f,  -0.268406f, -0.263624f,
                      -0.295314f, 0.268406f,  0.263624f,  0.295314f,  -0.268406f,   -0.263624f, -0.295314f, 0.268406f,
                      0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,
                      -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,    0.295314f,  -0.268406f, -0.263624f,
                      -0.295314f, 0.268406f,  0.263624f,  0.295314f,  -0.268406f,   -0.263624f, -0.295314f, 0.268406f,
                      0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,   0.268406f,  0.249169f,  -0.228929f,
                      0.297088f,  0.122228f,  -0.254746f, 0.268241f,  -0.220535f,   0.278204f,  0.219845f,  -0.229805f,
                      0.27587f,   -0.23024f,  0.217957f,  0.279106f,  -0.220535f,   0.267893f,  -0.255438f, 0.119581f,
                      0.297088f,  -0.229303f, 0.248663f,  -0.283777f, -0.00146831f, 0.283208f,  -0.24917f,  0.228929f,
                      -0.297088f, -0.122232f, 0.254745f,  -0.268242f, 0.220535f,    -0.278203f, -0.219848f, 0.229804f,
                      -0.27587f,  0.230241f,  -0.217954f, -0.279107f, 0.220535f,    -0.267893f, 0.255439f,  -0.119576f,
                      -0.297088f, 0.229304f,  -0.248662f, 0.283778f,  0.00147314f,  -0.283207f, 0.24917f,   -0.228928f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,
                  }},
    OscTestParams{"SharkFin",
                  3,
                  {
                      0.0146487f, -0.251377f, -0.254835f, -0.249632f, -0.24712f,    -0.250254f, -0.252672f, -0.249755f,
                      -0.246449f, -0.250329f, -0.260105f, 0.208388f,  0.241524f,    0.250546f,  0.253397f,  0.249719f,
                      0.247348f,  0.25024f,   0.252958f,  0.249727f,  0.244741f,    0.250265f,  -0.294573f, -0.248909f,
                      -0.24552f,  -0.250348f, -0.252823f, -0.249757f, -0.247308f,   -0.25025f,  -0.253739f, -0.249666f,
                      -0.237469f, 0.259094f,  0.257323f,  0.249512f,  0.246743f,    0.250274f,  0.252648f,  0.249767f,
                      0.24696f,   0.250281f,  0.255791f,  0.249951f,  -0.225782f,   -0.250904f, -0.254194f, -0.249676f,
                      -0.247232f, -0.250242f, -0.246902f, -0.258005f, -0.23786f,    0.236259f,  0.258006f,  0.247331f,
                      0.246902f,  0.258005f,  0.237861f,  -0.236258f, -0.258006f,   -0.247331f, -0.246902f, -0.258005f,
                      -0.237862f, 0.236257f,  0.258006f,  0.247332f,  0.246901f,    0.258005f,  0.237863f,  -0.236256f,
                      -0.258006f, -0.247332f, -0.246901f, -0.258005f, -0.237864f,   0.236255f,  0.258006f,  0.247332f,
                      0.246901f,  0.258005f,  0.237865f,  -0.236254f, -0.258006f,   -0.247332f, -0.246901f, -0.258005f,
                      -0.237866f, 0.236253f,  0.258006f,  0.247333f,  0.2469f,      0.258005f,  0.237867f,  -0.236252f,
                      -0.258006f, -0.247333f, -0.2469f,   -0.258005f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,
                      -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,    0.295314f,  -0.268406f, -0.263624f,
                      -0.295314f, 0.268406f,  0.263624f,  0.295314f,  -0.268406f,   -0.263624f, -0.295314f, 0.268406f,
                      0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,
                      -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,    0.295314f,  -0.268406f, -0.263624f,
                      -0.295314f, 0.268406f,  0.263624f,  0.295314f,  -0.268406f,   -0.263624f, -0.295314f, 0.268406f,
                      0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,   0.268406f,  0.249169f,  -0.228929f,
                      0.297088f,  0.122228f,  -0.254746f, 0.268241f,  -0.220535f,   0.278204f,  0.219845f,  -0.229805f,
                      0.27587f,   -0.23024f,  0.217957f,  0.279106f,  -0.220535f,   0.267893f,  -0.255438f, 0.119581f,
                      0.297088f,  -0.229303f, 0.248663f,  -0.283777f, -0.00146831f, 0.283208f,  -0.24917f,  0.228929f,
                      -0.297088f, -0.122232f, 0.254745f,  -0.268242f, 0.220535f,    -0.278203f, -0.219848f, 0.229804f,
                      -0.27587f,  0.230241f,  -0.217954f, -0.279107f, 0.220535f,    -0.267893f, 0.255439f,  -0.119576f,
                      -0.297088f, 0.229304f,  -0.248662f, 0.283778f,  0.00147314f,  -0.283207f, 0.24917f,   -0.228928f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,
                  }},
    OscTestParams{"Pulse",
                  5,
                  {
                      0.0146487f, -0.251377f, -0.254835f, -0.249632f, -0.24712f,    -0.250254f, -0.252672f, -0.249755f,
                      -0.246449f, -0.250329f, -0.260105f, 0.208388f,  0.241524f,    0.250546f,  0.253397f,  0.249719f,
                      0.247348f,  0.25024f,   0.252958f,  0.249727f,  0.244741f,    0.250265f,  -0.294573f, -0.248909f,
                      -0.24552f,  -0.250348f, -0.252823f, -0.249757f, -0.247308f,   -0.25025f,  -0.253739f, -0.249666f,
                      -0.237469f, 0.259094f,  0.257323f,  0.249512f,  0.246743f,    0.250274f,  0.252648f,  0.249767f,
                      0.24696f,   0.250281f,  0.255791f,  0.249951f,  -0.225782f,   -0.250904f, -0.254194f, -0.249676f,
                      -0.247232f, -0.250242f, -0.246902f, -0.258005f, -0.23786f,    0.236259f,  0.258006f,  0.247331f,
                      0.246902f,  0.258005f,  0.237861f,  -0.236258f, -0.258006f,   -0.247331f, -0.246902f, -0.258005f,
                      -0.237862f, 0.236257f,  0.258006f,  0.247332f,  0.246901f,    0.258005f,  0.237863f,  -0.236256f,
                      -0.258006f, -0.247332f, -0.246901f, -0.258005f, -0.237864f,   0.236255f,  0.258006f,  0.247332f,
                      0.246901f,  0.258005f,  0.237865f,  -0.236254f, -0.258006f,   -0.247332f, -0.246901f, -0.258005f,
                      -0.237866f, 0.236253f,  0.258006f,  0.247333f,  0.2469f,      0.258005f,  0.237867f,  -0.236252f,
                      -0.258006f, -0.247333f, -0.2469f,   -0.258005f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,
                      -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,    0.295314f,  -0.268406f, -0.263624f,
                      -0.295314f, 0.268406f,  0.263624f,  0.295314f,  -0.268406f,   -0.263624f, -0.295314f, 0.268406f,
                      0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,   0.268406f,  0.263624f,  0.295314f,
                      -0.268406f, -0.263624f, -0.295314f, 0.268406f,  0.263624f,    0.295314f,  -0.268406f, -0.263624f,
                      -0.295314f, 0.268406f,  0.263624f,  0.295314f,  -0.268406f,   -0.263624f, -0.295314f, 0.268406f,
                      0.263624f,  0.295314f,  -0.268406f, -0.263624f, -0.295314f,   0.268406f,  0.249169f,  -0.228929f,
                      0.297088f,  0.122228f,  -0.254746f, 0.268241f,  -0.220535f,   0.278204f,  0.219845f,  -0.229805f,
                      0.27587f,   -0.23024f,  0.217957f,  0.279106f,  -0.220535f,   0.267893f,  -0.255438f, 0.119581f,
                      0.297088f,  -0.229303f, 0.248663f,  -0.283777f, -0.00146831f, 0.283208f,  -0.24917f,  0.228929f,
                      -0.297088f, -0.122232f, 0.254745f,  -0.268242f, 0.220535f,    -0.278203f, -0.219848f, 0.229804f,
                      -0.27587f,  0.230241f,  -0.217954f, -0.279107f, 0.220535f,    -0.267893f, 0.255439f,  -0.119576f,
                      -0.297088f, 0.229304f,  -0.248662f, 0.283778f,  0.00147314f,  -0.283207f, 0.24917f,   -0.228928f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,  0.27542f,   -0.158233f, -0.264833f,   0.23266f,   -0.27542f,  0.158233f,
                      0.264833f,  -0.23266f,
                  }}};

INSTANTIATE_TEST_SUITE_P(WaveTableOscillatorTests, WaveTableOscillatorParamTest,
                         ::testing::ValuesIn(testParamsOscTestParams));

}
