

#include <gtest/gtest.h>
#include <cmath>
#include <random>

#include "Reverbs/FdnTankBlockDelayWalshSIMD.h"
#include "Reverbs/FdnTankBlockDelaySIMD.h"
#include "Reverbs/FdnTankBlockDelay.h"
#include "Reverbs/FdnTankRef.h"

namespace AbacDsp::Test
{
// use clinical sizes

static const std::array<unsigned, 32> primeSizes32{113, 127, 131, 137, 139, 149, 151, 157, //
                                                   163, 167, 173, 179, 181, 191, 193, 197, //
                                                   199, 211, 223, 227, 229, 233, 239, 241, //
                                                   251, 257, 263, 269, 271, 277, 281, 283};
const std::vector expected{
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    1.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           1.f,          0.f,
    0.f,          0.f,           1.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    1.f,          0.f,           1.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           1.f,           0.f,           1.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           1.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           1.f,          0.f,           0.f,           0.f,           1.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           1.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           1.f,          0.f,           1.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           1.f,          0.f,
    1.f,          0.f,           0.f,          0.f,           1.f,           0.f,           1.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           1.f,          0.f,           0.f,           0.f,           0.f,          0.f,
    0.f,          0.f,           0.f,          0.f,           0.f,           0.f,           1.f,          0.f,
    0.f,          -0.102804f,    1.f,          0.f,           1.f,           0.f,           0.f,          0.f,
    1.f,          0.f,           0.f,          0.f,           0.f,           0.f,           1.f,          -0.19893f,
    1.f,          0.f,           0.f,          -0.197103f,    0.f,           0.f,           0.f,          0.f,
    0.f,          -0.194427f,    1.f,          -0.193553f,    0.f,           0.0961262f,    0.f,          0.f,
    1.f,          -0.190425f,    0.f,          0.f,           0.f,           -0.0950028f,   1.f,          -0.000726163f,
    0.f,          -0.186875f,    0.f,          0.185923f,     1.f,           -0.371094f,    1.f,          0.f,
    0.f,          -0.0916238f,   0.f,          -0.183432f,    1.f,           -0.0910498f,   0.f,          -0.362944f,
    1.f,          0.179972f,     1.f,          0.179368f,     0.f,           -0.00177317f,  0.f,          0.532085f,
    0.f,          -0.000584766f, 0.f,          -0.177708f,    0.f,           -0.351569f,    0.f,          0.173991f,
    0.f,          -0.260141f,    0.f,          -0.173551f,    0.f,           -0.257302f,    0.f,          0.16884f,
    0.f,          -0.341644f,    0.f,          -0.33923f,     0.f,           0.166408f,     0.f,          -0.674564f,
    0.f,          -0.0833108f,   0.f,          -0.000686996f, 0.f,           -0.329642f,    0.f,          -0.165349f,
    0.f,          -0.328604f,    0.f,          0.487473f,     0.f,           -0.0832982f,   0.f,          0.486749f,
    0.f,          0.802597f,     0.f,          0.32065f,      0.f,           -0.239675f,    0.f,          -0.163848f,
    0.f,          0.159002f,     0.0105686f,   -0.163081f,    0.f,           0.14843f,      0.f,          -0.000642359f,
    0.f,          -0.54716f,     0.f,          -0.153486f,    0.f,           -0.618778f,    0.f,          -0.310971f,
    0.0303328f,   0.606964f,     0.f,          -0.155431f,    0.0299572f,    0.0786452f,    0.f,          0.751791f,
    0.f,          -0.52444f,     0.0294071f,   -0.459309f,    0.0292272f,    -0.747625f,    -0.00924024f, 0.448927f,
    0.f,          -0.145842f,    0.0572821f,   -0.283648f,    0.f,           -0.14303f,     0.0194609f,   0.284539f,
    0.0105686f,   -0.0011585f,   0.0558696f,   0.292638f,     -0.00803987f,  -0.372368f,    0.0828461f,   -0.284679f,
    -0.00924024f, 0.0706802f,    0.0272334f,   -0.00838372f,  0.0558029f,    -1.00585f,     0.0724696f,   -0.557644f,
    0.080021f,    0.208918f,     -0.034287f,   -0.561185f,    0.0366876f,    0.0626248f,    0.036741f,    0.418844f,
    -0.0643851f,  -0.424546f,    0.0446486f,   -0.262703f,    9.89637e-05f,  -0.407063f,    0.0791385f,   -0.835407f,
    -0.0395013f,  0.545952f,     0.100679f,    0.269637f,     0.186074f,     0.815984f,     0.0146403f,   0.26825f,
    -0.0368386f,  0.666344f,     0.167271f,    0.922625f,     0.139332f,     0.593333f,     -0.0293999f,  -0.257479f,
    0.0981961f,   0.24879f,      -0.0119622f,  0.390885f,     0.144413f,     0.518739f,     0.152194f,    -0.13353f,
    0.0999616f,   -0.132926f,    0.0933224f,   -0.506446f,    0.0308757f,    0.248892f,     0.18691f,     0.503277f,
    0.074932f,    -0.126957f,    -0.00717108f, 0.25118f,      -0.0817225f,   0.0657108f,    -0.0131723f,  0.248308f,
    -0.0268632f,  0.487899f,     -0.0222706f,  -0.12375f,     0.0959774f,    -0.0629692f,   0.211949f,    -0.00792251f,
    -0.0310263f,  -0.17993f,     0.113282f,    -0.476261f,    0.203737f,     -0.235471f,    0.0260728f,   -0.354174f,
    0.101921f,    0.055357f,     -0.233971f,   0.00159579f,   0.100005f,     -0.119261f,    0.228796f,    -0.230616f,
    -0.0528879f,  0.689107f,     0.103356f,    0.226392f,     0.147059f,     0.279363f,     0.234168f,    0.222769f,
    0.0748689f,   0.170323f,     -0.0502325f,  -0.0118124f,   0.142229f,     -0.000258978f, -0.0437301f,  -0.114967f,
    0.105613f,    -0.113673f,    -0.0067229f,  0.207222f,     0.0119536f,    -0.00102562f,  0.102639f,    0.308836f,
    0.244487f,    0.108048f,     -0.0861228f,  -0.00514016f,  0.147257f,     -0.28059f,     0.363182f,    -0.435301f,
    0.243378f,    -0.22617f,     0.0758789f,   -0.307024f,    0.13925f,      0.0832422f,    0.181906f,    -0.211779f,
    0.049739f,    -0.152637f,    0.194949f,    -0.0119198f,   0.209982f,     0.105735f,     0.224639f,    -0.125818f,
    0.462499f,    0.0978583f,    -0.00552937f, -0.118448f,    0.182709f,     0.117363f,     0.178331f,    -0.194655f,
    0.205882f,    0.00889082f,   0.0103464f,   -0.0214601f,   -0.101462f,    -0.11765f,     -0.148359f,   0.00246124f,
    0.0226967f,   -0.159498f,    -0.0615259f,  -0.0755676f,   -0.235139f,    -0.0118006f,   0.0981569f,   0.0612113f,
    0.412953f,    0.156012f,     -0.0832562f,  0.0920591f,    0.137055f,     0.0812661f,    -0.0483459f,  -0.0542109f,
    -0.036524f,   0.0318939f,    0.108473f,    -0.0223447f,   -0.177232f,    0.100812f,     -0.0314252f,  -0.10942f,
    0.00359568f,  -0.0777211f,   0.00904766f,  -0.102044f,    0.0347166f,    0.0141552f,    0.171071f,    -0.0172056f,
    -0.0119867f,  -0.0120472f,   -0.0842317f,  0.00743921f,   -0.000435181f, -0.00514778f,  0.0969101f,   0.0032957f,
    -0.131504f,   0.00803603f,   -0.0289666f,  0.0782997f,    0.061915f,     -0.0143508f,   -0.113115f,   -0.090202f,
    0.0511246f,   -0.00556075f,  -0.116938f,   -0.0168849f,   -0.0273949f,   -0.0276763f,   -0.0947296f,  -0.015107f,
    0.0357209f,   -0.00885305f,  0.0931142f,   -0.00742608f,  -0.0576008f,   -0.027153f,    -0.0761263f,  0.00339699f,
    0.029873f,    -0.0529956f,   0.0602066f,   -0.0157799f,   -0.0236985f,   -0.0220213f,   -0.0118723f,  -0.0138875f,
    -0.0248814f,  -0.0337105f,   0.0186455f,   -0.035985f,    0.152775f,     -0.0137988f,   0.0444776f,   -0.0476847f,
    0.049126f,    -0.0633116f,   -0.0807927f,  0.0169976f,    -0.0544936f,   -0.0149334f,   -0.159835f,   0.0385337f,
    -0.105925f,   -0.0654599f,   0.12664f,     -0.0808044f,   0.0682708f,    -0.0422079f,   -0.0215132f,  -0.0807f,
    0.0704315f,   -0.0683229f,   -0.033776f,   -0.0163379f,   0.151046f,     -0.0711302f,   -0.0435474f,  -0.0467273f,
    0.0901834f,   -0.0955375f,   -0.209815f,   -0.0693825f,   0.154677f,     0.00313549f,   -0.0641041f,  -0.0142073f,
    0.187131f,    -0.0302365f,   0.119687f,    -0.0552374f,   0.139764f,     -0.0295902f,   -0.0655555f,  -0.0327631f,
    -0.0531486f,  -0.0914383f,   0.0619667f,   0.0144372f,    0.0259213f,    0.069316f,     0.0494859f,   0.137358f,
    -0.0290901f,  0.11115f,      -0.0733742f,  0.00492569f,   0.0554325f,    0.0256246f,    -0.04562f,    0.0290222f,
    0.187583f,    -0.0130908f,   0.0318053f,   -0.0403154f,   0.0699812f,    0.0680319f,    -0.0503122f,  0.036059f,
    0.0504546f,   0.0509279f,    0.0351003f,   0.0564831f,    0.00521529f,   0.060992f,     0.0200566f,   -0.0893433f,
    0.132974f,    0.0680917f,    -0.0278531f,  -0.0172893f,   -0.0487024f,   -0.0274464f,   0.106693f,    -0.0449322f,
    0.048524f,    -0.00287646f,  0.0655824f,   0.0866823f,    -0.022183f,    -0.0494423f,   -0.0103873f,  0.0168885f,
    0.0473929f,   0.0506841f,    0.0120339f,   0.022621f,     0.122979f,     0.0660845f,    -0.0181477f,  -0.00206943f,
    -0.0458015f,  -0.0283999f,   0.0250451f,   -0.0284092f,   0.0416645f,    0.0606619f,    0.0336162f,   0.0276497f,
    -0.0218551f,  0.0220467f,    -0.0408954f,  0.0647117f,    0.0472593f,    -0.00100409f,  -0.0122126f,  -0.117452f,
    0.0682983f,   -0.0424095f,   0.0278103f,   -0.00502156f,  0.0613453f,    0.0301187f,    0.000503192f, 0.0253838f,
    -0.0286498f,  0.0021494f,    -0.021726f,   -0.0193219f,   0.093717f,     -0.0895963f,   0.0419894f,   -0.00550202f,
    0.0329967f,   -0.00203824f,  0.0608216f,   -0.022626f,    -0.0309861f,   -0.0119569f,   -0.0221352f,  -0.00308494f,
    0.0469912f,   0.0277965f,    0.0418067f,   0.0800778f,    0.0126821f,    -0.0569205f,   0.00189274f,  -0.00563878f,
    0.0500946f,   -0.0174751f,   -0.0229549f,  0.0218633f,    0.0786643f,    -0.0761167f,   -0.0130074f,  0.0396118f,
    0.0350474f,   0.0892926f,    0.113134f,    0.0463099f,    0.00727652f,   0.0455446f,    -0.0097455f,  -0.00347763f,
    -0.0175796f,  0.0173109f,    0.0415423f,   0.0224484f,    0.0102273f,    -0.0289783f,   0.017032f,    0.0270056f,
    0.00687592f,  -0.0252279f,   0.00991382f,  0.00635388f,   0.0465996f,    -0.036324f,    0.0740164f,   -0.0290606f,
    -0.00108621f, 0.0130436f,    0.0289638f,   0.0263729f,    0.012716f,     0.0263404f,    0.0135091f,   -0.00416375f,

};

TEST(FdnReverb32, checkReference)
{
    constexpr size_t BlockSize{16};
    FdnTankRef<4096, 32, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setOrder(32);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);

    for (size_t i = 0; i < primeSizes32.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes32[i]);
    }

    constexpr std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    constexpr std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};

    for (size_t j = 0; j < 50; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        for (float value : out)
        {
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f);
        }
    }
}

TEST(FdnReverb32, checkBlockDelay)
{
    constexpr size_t BlockSize{16};
    FdnTankBlockDelay<4096, 32, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);


    for (size_t i = 0; i < primeSizes32.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes32[i]);
    }

    constexpr std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    constexpr std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};

    for (size_t j = 0; j < 16 * 2 - 1; ++j)
    {
        indexExpected++;
    }
    for (size_t j = 0; j < 48; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        for (float value : out)
        {
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f) << j;
        }
    }
}

TEST(FdnReverb32, checkSimd)
{
    constexpr size_t BlockSize{16};
    FdnTankBlockDelaySIMD<4096, 32, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);

    for (size_t i = 0; i < primeSizes32.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes32[i]);
    }

    constexpr std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    constexpr std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};
    for (size_t j = 0; j < 16 * 2 - 1; ++j)
    {
        indexExpected++;
    }
    for (size_t j = 0; j < 48; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        for (float value : out)
        {
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f) << j;
        }
    }
}

TEST(FdnReverb32, checkSimdWalsh)
{
    constexpr size_t BlockSize{16};
    FdnTankBlockDelaySIMDWalsh<4096, 32, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);

    for (size_t i = 0; i < primeSizes32.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes32[i]);
    }

    constexpr std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    constexpr std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};
    for (size_t j = 0; j < 16 * 2 - 1; ++j)
    {
        indexExpected++;
    }
    for (size_t j = 0; j < 48; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        for (float value : out)
        {
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f) << j;
        }
    }
}

}
