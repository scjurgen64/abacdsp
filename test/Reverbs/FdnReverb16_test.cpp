

#include <gtest/gtest.h>
#include <cmath>
#include <random>

#include "Reverbs/FdnTankBlockDelayWalshSIMD.h"
#include "Reverbs/FdnTankBlockDelaySIMD.h"
#include "Reverbs/FdnTankBlockDelay.h"
#include "Reverbs/FdnTankRef.h"

namespace AbacDsp::Test
{
// use clinical sizes

static const std::array<unsigned, 16> primeSizes{113, 127, 131, 137, 139, 149, 151, 157,
                                                 163, 167, 173, 179, 181, 191, 193, 197};
const std::vector expected{
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    1.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    1.f,           0.f,           0.f,           0.f,           1.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           1.f,           0.f,          1.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           1.f,           0.f,           1.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           1.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           1.f,           0.f,           0.f,           0.f,          1.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           1.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           1.f,           0.f,          1.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           1.f,           0.f,           1.f,           0.f,          0.f,           0.f,
    1.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           -0.145386f,    0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           0.f,           0.f,           0.f,           0.f,          0.f,           0.f,
    0.f,           -0.281329f,    0.f,           0.f,           0.f,          -0.278746f,    0.f,
    0.f,           0.f,           0.f,           0.f,           -0.274962f,   0.f,           -0.273725f,
    0.f,           0.135943f,     0.f,           0.f,           0.f,          -0.269302f,    0.f,
    0.f,           0.f,           -0.134354f,    0.f,           -0.00102695f, 0.f,           -0.264281f,
    0.f,           0.262935f,     0.f,           -0.524806f,    0.f,          0.f,           0.f,
    -0.129576f,    0.f,           -0.259412f,    0.f,           -0.128764f,   0.f,           -0.513281f,
    0.f,           0.254519f,     0.f,           0.253665f,     0.f,          -0.00250763f,  0.f,
    0.752482f,     0.f,           -0.000826985f, 0.f,           -0.251317f,   0.f,           -0.497193f,
    0.f,           0.24606f,      0.f,           -0.367894f,    0.f,          -0.245438f,    0.f,
    -0.363879f,    0.f,           0.238776f,     0.f,           -0.483158f,   0.f,           -0.479744f,
    0.f,           0.235336f,     0.f,           -0.712351f,    0.f,          -0.117819f,    0.f,
    -0.000971548f, 0.f,           -0.466184f,    0.f,           -0.233839f,   0.f,           -0.464716f,
    0.f,           0.925634f,     0.f,           0.114382f,     0.f,          0.688367f,     0.f,
    1.36464f,      0.f,           0.453468f,     0.f,           -0.338952f,   0.f,           0.22526f,
    0.f,           0.222641f,     0.0211372f,    -0.00110047f,  0.f,          0.662855f,     0.f,
    -0.000908434f, 0.f,           -0.546659f,    0.f,           -0.218927f,   0.f,           -0.216772f,
    0.f,           -0.214955f,    0.0606656f,    0.643221f,     0.f,          0.213432f,     0.0599144f,
    -0.106282f,    0.f,           0.633659f,     0.f,           -0.10492f,    0.0588142f,    -0.000346206f,
    0.0584544f,    -0.208075f,    -0.0184805f,   0.f,           0.f,          -0.412129f,    0.114564f,
    -0.409907f,    0.f,           -0.20397f,     0.0389219f,    0.203099f,    0.0211372f,    -0.202088f,
    0.111739f,     0.f,           -0.0160797f,   0.100005f,     0.165692f,    -0.199056f,    -0.0184805f,
    0.0990505f,    0.0544669f,    0.197173f,     0.111606f,     0.196219f,    0.144939f,     0.f,
    0.160042f,     -0.097168f,    -0.0685739f,   0.f,           0.0733753f,   0.f,           0.0734821f,
    0.f,           -0.12877f,     0.f,           0.0892973f,    0.f,          0.00019793f,   0.f,
    0.158277f,     0.f,           -0.0790026f,   0.f,           0.201358f,    0.f,           0.372147f,
    0.f,           0.0292807f,    0.f,           -0.0736771f,   0.f,          0.334542f,     0.f,
    0.278664f,     0.f,           -0.0587999f,   0.f,           0.147271f,    0.f,           -0.0239245f,
    0.f,           0.288827f,     0.f,           0.304389f,     0.f,          0.199923f,     0.f,
    0.186645f,     0.f,           0.0141957f,    0.f,           0.28014f,     0.f,           0.149864f,
    0.f,           -0.106772f,    0.f,           -0.163445f,    0.f,          -0.0263446f,   0.f,
    -0.190406f,    0.f,           -0.109842f,    -0.00307305f,  0.164831f,    0.f,           0.289098f,
    0.f,           -0.150146f,    0.f,           0.181655f,     0.f,          0.361704f,     0.f,
    -0.174006f,    0.f,           0.0306612f,    -0.0116934f,   -0.431642f,   0.f,           -0.031183f,
    -0.0115296f,   0.480036f,     0.f,           -0.148275f,    0.f,          -0.177608f,    -0.0112896f,
    0.0600938f,    -0.0112112f,   0.0774051f,    -0.00018664f,  0.145963f,    0.f,           -0.0499275f,
    -0.0328913f,   0.20835f,      0.f,           -0.208121f,    -0.0110632f,  0.0832071f,    -0.0112463f,
    -0.16935f,     -0.0319775f,   0.0117933f,    -0.000358599f, -0.0225651f,  -0.0420624f,   0.154363f,
    -0.000120137f, -0.136595f,    -0.0155396f,   0.0788473f,    -0.0420789f,  -0.0220633f,   -0.0303642f,
    0.0160054f,    -0.0404329f,   0.0559442f,    0.0219469f,    -0.0140921f,  -0.0606318f,   0.0789124f,
    -0.0100529f,   -0.119632f,    0.00752635f,   0.139633f,     -0.034597f,   -0.00492021f,  0.00930786f,
    0.0671147f,    -0.0697303f,   0.0222916f,    -0.0117203f,   0.0988928f,   -0.0490214f,   -0.000796138f,
    -0.0929548f,   0.0437038f,    0.0138148f,    0.0561279f,    0.025147f,    0.000651591f,  -0.0600042f,
    -0.111452f,    -0.0544028f,   -0.0635569f,   0.00696146f,   -0.00775927f, -0.0287574f,   0.0308885f,
    0.0597293f,    -0.00475397f,  -0.169643f,    0.0250927f,    -0.0983485f,  0.0634706f,    -0.0989514f,
    -0.0660095f,   -0.00828277f,  -0.00933855f,  -0.028773f,    -0.0234569f,  -0.127122f,    0.105941f,
    -0.0422996f,   0.0759729f,    -0.0374452f,   -0.0734433f,   0.0228559f,   0.0215868f,    -0.0484439f,
    5.92303e-05f,  -0.0562355f,   0.0327334f,    -0.00387881f,  0.0522167f,   -0.0808587f,   -0.00036938f,
    -0.0155195f,   -0.0404197f,   0.0148168f,    -0.0192491f,   0.0292987f,   0.000559452f,  0.01024f,
    0.0198302f,    0.0804987f,    -0.009811f,    0.0770791f,    0.0413645f,   0.2319f,       -0.0198112f,
    0.0553403f,    0.0311461f,    -0.254549f,    -0.00944162f,  0.034043f,    -0.00944162f,  0.0632059f,
    0.00203955f,   0.0236726f,    0.011466f,     0.0711254f,    0.00083552f,  0.00933809f,   0.f,
    0.0315903f,    0.00790873f,   -0.051833f,    0.f,           0.0581708f,   0.00277009f,   -0.0743656f,
    0.003568f,     0.00585368f,   0.00767389f,   0.0612088f,    0.000834776f, -0.00565945f,  0.00945186f,
    0.02751f,      0.00229921f,   -0.031356f,    0.00372211f,   0.0104234f,   0.0131277f,    0.0746689f,
    0.00585631f,   -0.0310698f,   0.0105677f,    0.10368f,      -0.00225411f, -0.0218543f,   0.0230423f,
    0.0432085f,    -0.000310939f, -0.0159087f,   0.00472341f,   -0.0316231f,  0.0127659f,    0.0386555f,
    0.00553503f,   -0.0380971f,   0.0229474f,    0.111323f,     0.00966955f,  0.0638385f,    0.0179772f,
    -0.0233227f,   0.020327f,     0.0158901f,    0.00672042f,   -0.0537604f,  0.004635f,     -0.147133f,
    0.0141157f,    0.076344f,     0.0110209f,    0.0502719f,    0.00760997f,  -0.00637413f,  0.0134562f,
    -0.0222617f,   -0.00238009f,  -0.0348986f,   0.0532851f,    -0.101878f,   0.0328941f,    -0.0359227f,
    0.0320305f,    0.0341431f,    0.0160408f,    0.0134839f,    0.0462191f,   0.0786748f,    0.0541608f,
    -0.0327413f,   0.00656414f,   0.0253843f,    0.0314268f,    0.0352667f,   0.00423717f,   -0.0244626f,
    0.0482817f,    0.0209472f,    0.0245925f,    -0.0867446f,   0.0248552f,   0.0283567f,    0.0344721f,
    -0.0112791f,   0.037793f,     0.00253751f,   0.0591973f,    0.0812021f,   0.0328285f,    0.112246f,
    0.00714926f,   -0.0669926f,   -0.0144625f,   0.0189528f,    0.0224059f,   -0.000602312f, -0.042558f,
    0.0198711f,    -0.00614767f,  -0.017768f,    0.0732078f,    -0.00210223f, 0.0205098f,    0.0291586f,
    0.0105983f,    -0.021521f,    -0.0104744f,   -0.0212215f,   0.103478f,    -0.000891593f, 0.000293416f,
    -0.00106828f,  -0.0145603f,   0.00370962f,   0.0124866f,    -0.0552526f,  -0.023674f,    0.0178484f,
    0.0358893f,    -0.00612988f,  -0.0072968f,   0.0631424f,    -0.0317042f,  -0.0316399f,   -0.00930228f,
    -0.0118309f,   0.0579971f,    -0.00501324f,  0.0845247f,    -0.00531411f, 0.030948f,     -0.015072f,
    0.029618f,     -0.00207166f,  0.0124421f,    0.00476263f,   0.0287969f,   0.00515685f,   -0.0113868f,
    -0.0241894f,   -0.0350373f,   0.0091557f,    -0.00242503f,  -0.0289059f,  0.0555898f,    0.0134807f,
    -0.0332872f,   -0.0088677f,   -0.0274939f,   -0.00198004f,  0.00806348f,  -0.00740725f,  -0.0320915f,
    -0.0109433f,   -0.00926042f,  -1.9843e-05f,  -0.0285638f,   -0.00583206f, 0.0144268f,    -0.00893111f,
    0.0191465f,    -0.0107002f,   -0.0284119f,   -3.32985e-05f, -0.0157166f,  -0.00191348f,  -0.0661129f,
    -0.00404905f,  0.0632011f,    0.00462715f,   0.0131504f,    -0.01092f,    0.0676391f,    -0.0061961f,
    0.0260386f,    -0.0155311f,   -0.00108071f,  -0.0096596f,   -0.048711f,   -0.0136338f,   -0.0109388f,
    -0.0102667f,   -0.0108612f,   0.00389907f,   0.0251885f,    -0.0162218f,  -0.00686679f,  -0.00575427f,
    0.0148423f,    -0.0219542f,   -0.0187174f,   -0.00263088f,  -0.0376456f,  -0.01368f,     0.0361497f,
    -0.0133637f,   -0.000921556f, -0.0118461f,   0.0117768f,    -0.0286784f,  0.0236964f,    -0.00898116f,
    0.00103374f,   -0.00567681f,
};

TEST(FdnReverb16, checkReference)
{
    constexpr size_t BlockSize{16};
    FdnTankRef<4096, 16, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setOrder(16);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);

    for (size_t i = 0; i < primeSizes.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes[i]);
    }

    const std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};

    for (size_t j = 0; j < 50; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        for (float value : out)
        {
            // std::cout << indexExpected++ << "\t" << value << "" << std::endl;
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f);
        }
    }
}

TEST(FdnReverb16, checkBlockDelay)
{
    constexpr size_t BlockSize{16};
    FdnTankBlockDelay<4096, 16, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);


    for (size_t i = 0; i < primeSizes.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes[i]);
    }

    const std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};

    for (size_t j = 0; j < 16 * 2 - 1; ++j)
    {
        indexExpected++;
    }
    for (size_t j = 0; j < 48; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        for (float value : out)
        {
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f) << j;
        }
    }
}

TEST(FdnReverb16, checkSimd)
{
    constexpr size_t BlockSize{16};
    FdnTankBlockDelaySIMD<4096, 16, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);

    for (size_t i = 0; i < primeSizes.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes[i]);
    }

    const std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};
    for (size_t j = 0; j < 16 * 2 - 1; ++j)
    {
        indexExpected++;
        // std::cout << "0\n";
    }
    for (size_t j = 0; j < 48; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        // std::cout << j << ":" << std::endl;
        for (float value : out)
        {
            // std::cout << indexExpected++ << "\t" << value << "" << std::endl;
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f) << j;
        }
    }
}

TEST(FdnReverb16, checkSimdWalsh)
{
    constexpr size_t BlockSize{16};
    FdnTankBlockDelaySIMDWalsh<4096, 16, BlockSize> sut{48000.f};
    sut.setDecay(30.f);
    sut.setMinSize(0.1);
    sut.setMaxSize(1.0);
    sut.setSpreadBulge(-0.4f);

    for (size_t i = 0; i < primeSizes.size(); ++i)
    {
        sut.setDirectSize(i, primeSizes[i]);
    }

    const std::array<float, BlockSize> in{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    const std::array<float, BlockSize> empty{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::array<float, BlockSize> out{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    size_t indexExpected{0};
    for (size_t j = 0; j < 16 * 2 - 1; ++j)
    {
        indexExpected++;
        // std::cout << "0\n";
    }
    for (size_t j = 0; j < 48; ++j)
    {
        if (j == 0)
        {
            sut.processBlock(in.data(), out.data());
        }
        else
        {
            sut.processBlock(empty.data(), out.data());
        }
        // std::cout << j << ":" << std::endl;
        for (float value : out)
        {
            // std::cout << indexExpected++ << "\t" << value << "" << std::endl;
            EXPECT_NEAR(expected[indexExpected++], value, 1E-5f) << j;
        }
    }
}

}
